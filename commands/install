#!/bin/bash

# Detect root if needed.
if [[ -z "${ROOT}" ]]; then
  ROOT="$(cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/.." && pwd)"
fi

# Load lib.
source "${ROOT}/util/detect"
source "${ROOT}/util/check_file"

# The command itself.
easy_goer_install() {
  # Parse options and arguments.
  local args=() os= arch= version= dir= parse=true pkg_dir= url_file= url= checksum_file= checksum= basename=

  while [[ -n "${1}" ]]; do
    if ${parse}; then
      case "${1}" in
        -a)
          arch="${2}"; shift;;
        -a*)
          arch="${1:2}";;
        -o)
          os="${2}"; shift;;
        -o*)
          os="${2:2}"; shift;;
        --)
          parse=false;;
        -*)
          echo "go-easy install: invalid option: ${1}" >&2; exit 1;;
        *)
          args+=("${1}");;
      esac
    else
      args+=("${1}")
    fi

    shift
  done

  set -- "${args[@]}"

  # Check arguments count.
  if [[ ${#} != 2 ]]; then
    echo "go-easy install: wrong number of arguments (given ${#}, expected 2)" >&2
    exit 1
  fi

  # Extract.
  version="${1}"
  dir="${2}"

  # If installation directory exists - refuse to do anything.
  if [[ -e "${dir}" ]]; then
    echo "go-easy install: ${dir} already exists - please remove it first" >&2
    exit 1
  fi

  # Detect OS & architecture.
  easy_goer_detect
  os="${arch:-$easy_goer_os}"
  arch="${arch:-$easy_goer_arch}"

  # Get URL & checksum.
  pkg_dir="${ROOT}/db/${version}/${os}/${arch}"
  url_file="${pkg_dir}/url"
  checksum_file="${pkg_dir}/checksum"

  if [[ ! -f "${url_file}" ]]; then
    echo "go-easy install: unknown version: ${version}: file ${url_file} does not exist" >&2
    exit 1
  fi
  url=$(< "${url_file}")

  if [[ ! -f "${checksum_file}" ]]; then
    echo "go-easy install: unknown version: ${version}: file ${checksum_file} does not exist" >&2
    exit 1
  fi
  checksum=$(< "${checksum_file}")

  # Figure out basename.
  basename="${url##*/}"

  # Install time.
  mkdir -p "${ROOT}/tmp"
  cd "${ROOT}/tmp"

  # Check if file already exists and matches the checksum.
  if ! easy_goer_check_file "./${basename}" "${checksum}"; then
    if [[ -z "${easy_goer_checksum}" ]]; then
      echo "go-easy install: file ${ROOT}/tmp/${basename} missing - downloading from ${url}" >&2
    else
      echo "go-easy install: file ${ROOT}/tmp/${basename} checksum mismatch" >&2
      echo "  expected: ${checksum}" >&2
      echo "    actual: ${easy_goer_checksum}" >&2
      echo "go-easy install: downloading from ${url}" >&2
      rm -rf "./${basename}"
    fi

    # Download and recheck.
    curl "${url}" > "./${basename}"
    if ! easy_goer_checksum "./${basename}" "${checksum}"; then
      echo "go-easy install: file ${ROOT}/tmp/${basename} checksum mismatch" >&2
      echo "  expected: ${checksum}" >&2
      echo "    actual: ${easy_goer_checksum}" >&2
      echo "go-easy install: aborting" >&2
      exit 1
    fi
  fi

  # Actual installation.
  mkdir -p "${dir}"
  tar xf "./${basename}" -C "${dir}" --strip-components=1
}

# If invoked directly, do the job.
if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
  easy_goer_install "${@}"
fi
